import React, { useEffect, useMemo, useRef } from 'react';
import { Chart, ChartTypeRegistry, registerables } from 'chart.js';

import { useSelector } from 'react-redux';
import { InterfaceState, ThemeValues } from '../../../../types/Interface';
import { useParametersStore } from '../Parameters/hooks/ParametersStore';
import { ChartConfiguration } from 'chart.js';
import { isValidNumber } from '../../../../helpers/MathHelpers';
import { calculateBMI } from '../Results/helpers/GeneralEquations';

const ChartBMI5a19Fem = () => {
  const { themeValues } = useSelector<InterfaceState, { themeValues: ThemeValues }>((state) => state.settings);

  const patientAge = useParametersStore((state) => state.patientAge);
  const height = useParametersStore((state) => state.height);
  const weight = useParametersStore((state) => state.weight);

  const chartContainer = useRef(null);

  const months = [
    '61',
    '62',
    '63',
    '64',
    '65',
    '66',
    '67',
    '68',
    '69',
    '70',
    '71',
    '72',
    '73',
    '74',
    '75',
    '76',
    '77',
    '78',
    '79',
    '80',
    '81',
    '82',
    '83',
    '84',
    '85',
    '86',
    '87',
    '88',
    '89',
    '90',
    '91',
    '92',
    '93',
    '94',
    '95',
    '96',
    '97',
    '98',
    '99',
    '100',
    '101',
    '102',
    '103',
    '104',
    '105',
    '106',
    '107',
    '108',
    '109',
    '110',
    '111',
    '112',
    '113',
    '114',
    '115',
    '116',
    '117',
    '118',
    '119',
    '120',
    '121',
    '122',
    '123',
    '124',
    '125',
    '126',
    '127',
    '128',
    '129',
    '130',
    '131',
    '132',
    '133',
    '134',
    '135',
    '136',
    '137',
    '138',
    '139',
    '140',
    '141',
    '142',
    '143',
    '144',
    '145',
    '146',
    '147',
    '148',
    '149',
    '150',
    '151',
    '152',
    '153',
    '154',
    '155',
    '156',
    '157',
    '158',
    '159',
    '160',
    '161',
    '162',
    '163',
    '164',
    '165',
    '166',
    '167',
    '168',
    '169',
    '170',
    '171',
    '172',
    '173',
    '174',
    '175',
    '176',
    '177',
    '178',
    '179',
    '180',
    '181',
    '182',
    '183',
    '184',
    '185',
    '186',
    '187',
    '188',
    '189',
    '190',
    '191',
    '192',
    '193',
    '194',
    '195',
    '196',
    '197',
    '198',
    '199',
    '200',
    '201',
    '202',
    '203',
    '204',
    '205',
    '206',
    '207',
    '208',
    '209',
    '210',
    '211',
    '212',
    '213',
    '214',
    '215',
    '216',
    '217',
    '218',
    '219',
    '220',
    '221',
    '222',
    '223',
    '224',
    '225',
    '226',
    '227',
    '228',
  ];
  const P3Data = [
    12.874, 12.868, 12.861, 12.855, 12.85, 12.845, 12.841, 12.837, 12.834, 12.831, 12.829, 12.828, 12.827, 12.826, 12.827, 12.828, 12.83, 12.832, 12.836, 12.84,
    12.845, 12.851, 12.857, 12.865, 12.873, 12.882, 12.892, 12.903, 12.915, 12.927, 12.94, 12.954, 12.969, 12.984, 13.001, 13.018, 13.036, 13.055, 13.075,
    13.095, 13.116, 13.137, 13.159, 13.182, 13.206, 13.23, 13.254, 13.279, 13.305, 13.331, 13.357, 13.384, 13.411, 13.439, 13.467, 13.496, 13.525, 13.555,
    13.585, 13.616, 13.648, 13.681, 13.714, 13.747, 13.782, 13.817, 13.852, 13.889, 13.926, 13.964, 14.002, 14.041, 14.081, 14.122, 14.163, 14.205, 14.247,
    14.29, 14.333, 14.377, 14.422, 14.467, 14.512, 14.558, 14.604, 14.65, 14.696, 14.743, 14.79, 14.836, 14.883, 14.93, 14.976, 15.023, 15.069, 15.115, 15.161,
    15.207, 15.252, 15.297, 15.341, 15.386, 15.429, 15.472, 15.515, 15.557, 15.599, 15.64, 15.68, 15.72, 15.759, 15.797, 15.834, 15.871, 15.907, 15.942, 15.976,
    16.01, 16.042, 16.074, 16.105, 16.135, 16.164, 16.192, 16.219, 16.245, 16.27, 16.295, 16.319, 16.342, 16.363, 16.384, 16.405, 16.424, 16.443, 16.461,
    16.478, 16.494, 16.509, 16.524, 16.538, 16.551, 16.564, 16.576, 16.587, 16.597, 16.607, 16.617, 16.626, 16.635, 16.643, 16.65, 16.658, 16.665, 16.671,
    16.678, 16.683, 16.689, 16.694, 16.7, 16.705, 16.709, 16.714, 16.718, 16.722, 16.726, 16.73, 16.734,
  ];
  const P15Data = [
    13.846, 13.84, 13.835, 13.831, 13.827, 13.824, 13.821, 13.819, 13.817, 13.816, 13.816, 13.816, 13.817, 13.818, 13.821, 13.824, 13.828, 13.832, 13.838,
    13.844, 13.851, 13.86, 13.869, 13.879, 13.89, 13.902, 13.914, 13.928, 13.943, 13.958, 13.974, 13.992, 14.01, 14.029, 14.049, 14.07, 14.091, 14.114, 14.137,
    14.162, 14.187, 14.213, 14.239, 14.266, 14.294, 14.323, 14.352, 14.382, 14.412, 14.443, 14.474, 14.506, 14.538, 14.571, 14.605, 14.639, 14.674, 14.709,
    14.745, 14.782, 14.819, 14.858, 14.897, 14.937, 14.977, 15.019, 15.061, 15.104, 15.147, 15.192, 15.237, 15.283, 15.33, 15.378, 15.426, 15.475, 15.525,
    15.575, 15.626, 15.678, 15.73, 15.782, 15.836, 15.889, 15.943, 15.997, 16.052, 16.106, 16.161, 16.216, 16.271, 16.325, 16.38, 16.435, 16.489, 16.544,
    16.598, 16.651, 16.705, 16.758, 16.81, 16.862, 16.914, 16.965, 17.016, 17.066, 17.115, 17.164, 17.212, 17.259, 17.306, 17.352, 17.397, 17.441, 17.484,
    17.527, 17.568, 17.609, 17.648, 17.687, 17.724, 17.761, 17.796, 17.831, 17.864, 17.897, 17.928, 17.959, 17.989, 18.018, 18.045, 18.072, 18.098, 18.123,
    18.148, 18.171, 18.193, 18.215, 18.235, 18.255, 18.274, 18.292, 18.31, 18.327, 18.343, 18.358, 18.373, 18.388, 18.401, 18.414, 18.427, 18.439, 18.451,
    18.463, 18.474, 18.485, 18.495, 18.505, 18.515, 18.524, 18.534, 18.543, 18.552, 18.56, 18.569, 18.577, 18.585, 18.593,
  ];
  const P50Data = [
    15.244, 15.243, 15.243, 15.244, 15.245, 15.246, 15.249, 15.252, 15.255, 15.259, 15.264, 15.27, 15.276, 15.283, 15.291, 15.3, 15.31, 15.32, 15.331, 15.344,
    15.357, 15.372, 15.387, 15.404, 15.421, 15.44, 15.459, 15.48, 15.501, 15.524, 15.548, 15.572, 15.598, 15.625, 15.652, 15.681, 15.711, 15.742, 15.773,
    15.806, 15.839, 15.874, 15.909, 15.945, 15.982, 16.019, 16.058, 16.096, 16.136, 16.176, 16.217, 16.258, 16.3, 16.343, 16.386, 16.43, 16.475, 16.52, 16.566,
    16.613, 16.661, 16.71, 16.76, 16.81, 16.861, 16.914, 16.967, 17.021, 17.076, 17.132, 17.188, 17.246, 17.304, 17.364, 17.424, 17.485, 17.546, 17.609, 17.672,
    17.736, 17.8, 17.865, 17.931, 17.997, 18.063, 18.13, 18.197, 18.264, 18.331, 18.399, 18.466, 18.533, 18.601, 18.668, 18.735, 18.801, 18.868, 18.934, 18.999,
    19.064, 19.129, 19.193, 19.257, 19.32, 19.382, 19.444, 19.504, 19.565, 19.624, 19.682, 19.74, 19.797, 19.852, 19.907, 19.961, 20.013, 20.065, 20.115,
    20.164, 20.212, 20.26, 20.305, 20.35, 20.393, 20.436, 20.477, 20.517, 20.556, 20.594, 20.631, 20.666, 20.701, 20.734, 20.767, 20.798, 20.829, 20.858,
    20.886, 20.914, 20.94, 20.966, 20.99, 21.014, 21.037, 21.059, 21.08, 21.101, 21.121, 21.14, 21.159, 21.177, 21.194, 21.212, 21.228, 21.244, 21.26, 21.276,
    21.291, 21.306, 21.32, 21.334, 21.348, 21.362, 21.375, 21.388, 21.401, 21.414, 21.427,
  ];
  const P85Data = [
    16.936, 16.945, 16.956, 16.967, 16.979, 16.991, 17.005, 17.019, 17.034, 17.049, 17.065, 17.083, 17.101, 17.12, 17.14, 17.161, 17.183, 17.206, 17.23, 17.255,
    17.281, 17.309, 17.337, 17.367, 17.398, 17.43, 17.464, 17.499, 17.534, 17.571, 17.609, 17.648, 17.689, 17.73, 17.773, 17.817, 17.862, 17.908, 17.955,
    18.004, 18.053, 18.103, 18.154, 18.206, 18.259, 18.313, 18.367, 18.422, 18.478, 18.535, 18.592, 18.65, 18.708, 18.767, 18.827, 18.887, 18.949, 19.011,
    19.074, 19.137, 19.202, 19.267, 19.334, 19.401, 19.469, 19.538, 19.608, 19.679, 19.751, 19.824, 19.898, 19.973, 20.048, 20.125, 20.202, 20.28, 20.359,
    20.439, 20.519, 20.6, 20.682, 20.764, 20.846, 20.929, 21.013, 21.096, 21.18, 21.264, 21.348, 21.432, 21.516, 21.6, 21.683, 21.766, 21.849, 21.931, 22.013,
    22.094, 22.175, 22.255, 22.335, 22.413, 22.491, 22.569, 22.645, 22.72, 22.795, 22.868, 22.94, 23.012, 23.082, 23.151, 23.219, 23.285, 23.35, 23.414, 23.477,
    23.538, 23.598, 23.656, 23.713, 23.768, 23.822, 23.875, 23.926, 23.976, 24.025, 24.072, 24.117, 24.162, 24.205, 24.247, 24.287, 24.326, 24.364, 24.4,
    24.436, 24.47, 24.503, 24.535, 24.565, 24.595, 24.623, 24.651, 24.677, 24.703, 24.727, 24.751, 24.774, 24.796, 24.818, 24.839, 24.859, 24.879, 24.898,
    24.917, 24.936, 24.953, 24.971, 24.988, 25.004, 25.021, 25.037, 25.053, 25.068, 25.084, 25.099, 25.113,
  ];
  const P97Data = [
    18.598, 18.624, 18.65, 18.677, 18.705, 18.734, 18.764, 18.795, 18.827, 18.86, 18.894, 18.929, 18.966, 19.003, 19.042, 19.081, 19.123, 19.165, 19.209,
    19.254, 19.3, 19.348, 19.397, 19.448, 19.501, 19.554, 19.609, 19.666, 19.723, 19.783, 19.843, 19.905, 19.969, 20.034, 20.1, 20.167, 20.235, 20.305, 20.376,
    20.449, 20.522, 20.597, 20.672, 20.748, 20.826, 20.904, 20.983, 21.062, 21.142, 21.223, 21.304, 21.386, 21.468, 21.551, 21.635, 21.719, 21.804, 21.889,
    21.976, 22.063, 22.151, 22.239, 22.328, 22.418, 22.509, 22.601, 22.693, 22.786, 22.88, 22.975, 23.07, 23.167, 23.264, 23.361, 23.459, 23.558, 23.658,
    23.758, 23.858, 23.959, 24.061, 24.162, 24.264, 24.366, 24.469, 24.571, 24.673, 24.775, 24.876, 24.978, 25.079, 25.179, 25.279, 25.378, 25.477, 25.574,
    25.671, 25.767, 25.862, 25.956, 26.05, 26.141, 26.232, 26.322, 26.41, 26.497, 26.583, 26.667, 26.75, 26.832, 26.912, 26.991, 27.067, 27.143, 27.217, 27.288,
    27.359, 27.427, 27.494, 27.559, 27.623, 27.684, 27.744, 27.802, 27.858, 27.913, 27.966, 28.017, 28.066, 28.114, 28.16, 28.205, 28.248, 28.289, 28.329,
    28.367, 28.404, 28.439, 28.473, 28.505, 28.536, 28.566, 28.594, 28.62, 28.646, 28.672, 28.695, 28.717, 28.739, 28.76, 28.78, 28.799, 28.817, 28.835, 28.852,
    28.868, 28.884, 28.899, 28.915, 28.929, 28.942, 28.956, 28.969, 28.982, 28.995, 29.007, 29.019, 29.03,
  ];
  const meses = patientAge * 12;
  const imc = isValidNumber(weight) && isValidNumber(height) && Number(weight) && Number(height) ? calculateBMI(Number(weight), Number(height)) : 0;

  const data = React.useMemo(() => {
    return {
      labels: months,
      datasets: [
        {
          label: '97h',
          data: P97Data,
          borderColor: 'red',
        },
        {
          label: '85th',
          data: P85Data,
          borderColor: 'orange',
        },
        {
          label: '50th',
          data: P50Data,
          borderColor: 'green',
        },
        {
          label: '15th',
          data: P15Data,
          borderColor: 'orange',
        },
        {
          label: '3rd',
          data: P3Data,
          borderColor: 'red',
        },
        {
          label: 'IMC atual',
          data: months.map((month) => (Number(month) === meses ? imc : null)),
          borderColor: 'purple', // Cor do marcador
          backgroundColor: 'purple', // Cor de fundo do marcador
          pointRadius: 8, // Tamanho do marcador
          pointHoverRadius: 12, // Tamanho ao passar o mouse
          showLine: false, // Não mostrar linha
          fill: false, // Sem preenchimento
        },
      ],
    };
  }, [height, weight]);

  const config: ChartConfiguration<keyof ChartTypeRegistry, (number | null)[], string | number | boolean> = useMemo(() => {
    return {
      type: 'line',
      options: {
        layout: {
          padding: 0,
        },
        showLine: true,
        plugins: {},
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            type: 'linear',
            grid: {
              display: true,
              lineWidth: 1,
              color: themeValues.separatorLight,
              drawBorder: false,
              drawTicks: true,
            },
            ticks: {
              padding: 8,
              stepSize: 1,
              fontColor: themeValues.alternate,
            },
            title: {
              display: true,
              text: 'IMC (kg/m2)',
              color: themeValues.primary,
            },
          },
          x: {
            type: 'category',
            grid: {
              display: false,
              drawTicks: true,
              drawBorder: false,
            },
            ticks: { padding: 8, stepSize: 1, fontColor: themeValues.alternate },
            title: {
              display: true,
              text: 'Idade em meses',
              color: themeValues.primary,
            },
          },
        },
      },
      data,
    };
  }, [themeValues, data]);

  useEffect(() => {
    let myChart: Chart | null = null;

    if (chartContainer && chartContainer.current) {
      Chart.register(...registerables);

      myChart = new Chart(chartContainer.current, config);
    }
    return () => {
      if (myChart) {
        myChart.destroy();
      }
    };
  }, [config]);

  return <canvas ref={chartContainer} />;
};

export default React.memo(ChartBMI5a19Fem);
